<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vente d'ordinateurs avec Scores Multiples</title>

    <!-- ======================= SECTION CSS (MODIFIÉE POUR NOUVEAUX BADGES) ======================= -->
    <style>
        :root {
            --primary-color: #3498db;
            --success-color: #27ae60;
            --danger-color: #e74c3c;
            --light-grey: #f4f4f9;
            --dark-grey: #333;
            --medium-grey: #777;
            --gaming-color: #e67e22; /* Orange for gaming */
            --pro-color: #8e44ad;   /* Purple for professional */
            --portability-color: #1abc9c; /* Teal for portability */
            --qp-color: #f1c40f;      /* Yellow for Quality/Price */
            --balance-color: #34495e; /* Dark blue-grey for Balance */
        }

        body {
            font-family: Arial, sans-serif;
            background-color: var(--light-grey);
            color: var(--dark-grey);
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
        }

        header {
            text-align: center;
            border-bottom: 2px solid #eee;
            padding-bottom: 20px;
            margin-bottom: 20px;
        }

        h1 {
            color: #2c3e50;
        }

        .search-container {
            margin-top: 20px;
        }

        #search-bar {
            width: 80%;
            max-width: 600px;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        #filter-controls {
            padding: 20px;
            margin-bottom: 20px;
            background-color: #f9f9f9;
            border-radius: 8px;
            border: 1px solid #e9e9e9;
        }
        
        #filter-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); /* Adjusted minmax */
            gap: 15px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-group label {
            font-size: 0.9em;
            margin-bottom: 5px;
            color: #666;
        }

        .filter-control {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .price-filter-group { /* Renamed for clarity, used for score ranges too */
            display: flex;
            gap: 10px;
            align-items: center;
        }
        .price-filter-group input {
            width: 100%;
        }
        
        #reset-filters-btn {
            grid-column: 1 / -1;
            margin-top: 15px;
            padding: 10px;
            background-color: var(--danger-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.2s;
        }
        #reset-filters-btn:hover {
            background-color: #c0392b;
        }
        
        #no-results-message {
            text-align: center;
            padding: 40px;
            font-size: 1.2em;
            color: var(--medium-grey);
            display: none;
        }

        .add-offer-section {
            background-color: #fdfdfd;
            padding: 25px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 30px;
        }

        .add-offer-section h2 {
            margin-top: 0;
            text-align: center;
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        #add-offer-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-group.full-width {
            grid-column: span 2;
        }

        .form-group label {
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }

        .form-group input[type="text"],
        .form-group input[type="number"],
        .form-group input[type="tel"], /* AJOUT */
        .form-group select {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1em;
        }

        .storage-group, .inline-group {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-top: 5px;
        }
        
        #add-offer-form button {
            grid-column: span 2;
            padding: 12px;
            background-color: var(--success-color);
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease;
            margin-top: 10px;
        }
        #add-offer-form button:hover {
            background-color: #2ecc71;
        }
        
        #offer-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); /* Slightly wider cards */
            gap: 20px;
        }

        .offer-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            background-color: #fafafa;
            transition: box-shadow 0.3s ease, opacity 0.3s ease;
            display: flex;
            flex-direction: column;
        }

        .offer-card:hover {
            box-shadow: 0 4px 15px rgba(0,0,0,0.15);
        }

        .offer-card h2 {
            margin-top: 0;
            font-size: 1.2em;
            color: var(--primary-color); /* Kept primary for title */
        }
        
        .offer-details {
            list-style: none;
            padding: 0;
            margin-top: 15px;
            font-size: 0.9em;
            flex-grow: 1;
        }

        .offer-details li {
            margin-bottom: 8px;
        }

        .offer-details li strong {
            color: #555;
        }

        .offer-card .price {
            font-size: 1.3em;
            font-weight: bold;
            color: var(--success-color);
            text-align: right;
            margin-top: 15px;
        }
        
        .score-badge {
            display: inline-block;
            padding: 4px 10px; /* Slightly larger padding */
            border-radius: 12px;
            color: white;
            font-weight: bold;
            font-size: 0.85em; /* Slightly smaller font for more badges */
            margin-right: 5px; /* Spacing between badges */
            margin-bottom: 5px; /* Spacing if they wrap */
        }
        .user-score { background-color: var(--medium-grey); }
        .gaming-score { background-color: var(--gaming-color); }
        .pro-score { background-color: var(--pro-color); }
        .portability-score { background-color: var(--portability-color); }
        .qp-score { background-color: var(--qp-color); }
        .balance-score { background-color: var(--balance-color); }

        /* -- AJOUT : Styles pour la notation par étoiles -- */
        .star-rating {
            font-size: 1.4em;
            color: var(--qp-color); /* Utilise la couleur jaune existante */
            margin-bottom: 10px;
            margin-top: -5px;
        }
        .star-rating .empty-star {
            color: #ccc; /* Étoiles vides en gris clair */
        }
    </style>
</head>
<body>

    <div class="container">
        <header>
            <h1>Offres d'ordinateurs avec Évaluation Détaillée</h1>
            <div class="search-container">
                <input type="search" id="search-bar" placeholder="Rechercher une offre par son nom...">
            </div>
        </header>

        <!-- ======================= SECTION DE FILTRES AMÉLIORÉE (AJOUT NOUVEAUX FILTRES) ======================= -->
        <section id="filter-controls">
            <div id="filter-container">
                <div class="filter-group"><label for="filter-brand">Marque</label><select id="filter-brand" class="filter-control"><option value="">Toutes</option><option>Apple</option><option>Dell</option><option>HP</option><option>Lenovo</option><option>Asus</option></select></div>
                <div class="filter-group"><label for="filter-ram">RAM (Go)</label><select id="filter-ram" class="filter-control"><option value="">Toutes</option><option>4</option><option>8</option><option>12</option><option>16</option><option>32</option><option>64</option></select></div>
                <div class="filter-group"><label for="filter-condition">État</label><select id="filter-condition" class="filter-control"><option value="">Tous</option><option>Neuf</option><option>Reconditionné</option><option>Occasion - Excellent</option><option>Occasion - Bon</option></select></div>
                <div class="filter-group"><label for="filter-age">Âge du PC</label><select id="filter-age" class="filter-control"><option value="">Tous</option><option>Moins de 1 an</option><option>1 à 2 ans</option><option>2 à 3 ans</option><option>Plus de 3 ans</option></select></div>
                <div class="filter-group"><label for="filter-gpu">Carte Graphique</label><select id="filter-gpu" class="filter-control"><option value="">Toutes</option><option>Intégrée (Intel/AMD)</option><option>NVIDIA GeForce RTX 40xx</option><option>NVIDIA GeForce RTX 30xx</option><option>AMD Radeon RX 7xxx</option></select></div>
                <div class="filter-group"><label>Prix (€)</label><div class="price-filter-group"><input type="number" id="filter-price-min" placeholder="Min" class="filter-control"><input type="number" id="filter-price-max" placeholder="Max" class="filter-control"></div></div>
                
                <!-- NOUVEAUX FILTRES DE SCORE -->
                <div class="filter-group"><label>Score Gaming (/100)</label><div class="price-filter-group"><input type="number" id="filter-gaming-score-min" placeholder="Min" class="filter-control"><input type="number" id="filter-gaming-score-max" placeholder="Max" class="filter-control"></div></div>
                <div class="filter-group"><label>Score Pro (/100)</label><div class="price-filter-group"><input type="number" id="filter-pro-score-min" placeholder="Min" class="filter-control"><input type="number" id="filter-pro-score-max" placeholder="Max" class="filter-control"></div></div>
                <div class="filter-group"><label>Score Portabilité (/100)</label><div class="price-filter-group"><input type="number" id="filter-portability-score-min" placeholder="Min" class="filter-control"><input type="number" id="filter-portability-score-max" placeholder="Max" class="filter-control"></div></div>
                <div class="filter-group"><label>Score Qualité/Prix (/100)</label><div class="price-filter-group"><input type="number" id="filter-qp-score-min" placeholder="Min" class="filter-control"><input type="number" id="filter-qp-score-max" placeholder="Max" class="filter-control"></div></div>
                <div class="filter-group"><label>Score Équilibre (/10)</label><div class="price-filter-group"><input type="number" id="filter-balance-score-min" placeholder="Min" class="filter-control" min="0" max="10"><input type="number" id="filter-balance-score-max" placeholder="Max" class="filter-control" min="0" max="10"></div></div>
            </div>
            <button id="reset-filters-btn">Réinitialiser les filtres</button>
        </section>

        <section class="add-offer-section">
            <h2>Ajouter une nouvelle offre</h2>
            <form id="add-offer-form">
                <div class="form-group full-width"><label for="title">Titre de l'annonce</label><input type="text" id="title" required></div>
                <div class="form-group"><label for="price">Prix (€)</label><input type="number" id="price" required min="0"></div>
                
                <!-- AJOUT : CHAMP POUR LE NUMÉRO DE TÉLÉPHONE -->
                <div class="form-group">
                    <label for="phone">Numéro de téléphone (Optionnel)</label>
                    <input type="tel" id="phone" placeholder="Ex: 0612345678">
                </div>
                
                <div class="form-group"><label for="user-note">Votre note (/100)</label><input type="number" id="user-note" min="0" max="100" required></div>
                <div class="form-group"><label for="brand">Marque</label><select id="brand"><option>Apple</option><option>Dell</option><option>HP</option><option>Lenovo</option><option>Asus</option><option>Acer</option><option>Microsoft</option><option>Autre</option></select></div>
                <div class="form-group"><label for="cpu">Processeur</label><select id="cpu"><option>Intel Core i3</option><option>Intel Core i5</option><option>Intel Core i7</option><option>Intel Core i9</option><option>AMD Ryzen 3</option><option>AMD Ryzen 5</option><option>AMD Ryzen 7</option><option>AMD Ryzen 9</option><option>Apple M1/M2/M3</option></select></div>
                <div class="form-group"><label for="ram">Mémoire RAM (Go)</label><select id="ram"><option>4</option><option>8</option><option>12</option><option selected>16</option><option>24</option><option>32</option><option>64</option></select></div>
                <div class="form-group"><label>Stockage</label><div class="storage-group"><select id="storage-size"><option>128 Go</option><option>256 Go</option><option>512 Go</option><option>1 To</option><option>2 To</option></select><label><input type="radio" name="storage-type" value="SSD" checked> SSD</label><label><input type="radio" name="storage-type" value="HDD"> HDD</label></div></div>
                <div class="form-group"><label for="gpu">Carte Graphique</label><select id="gpu"><option>Intégrée (Intel/AMD)</option><option>NVIDIA GeForce RTX 40xx</option><option>NVIDIA GeForce RTX 30xx</option><option>NVIDIA GeForce RTX 20xx</option><option>NVIDIA GeForce GTX 16xx</option><option>AMD Radeon RX 7xxx</option><option>AMD Radeon RX 6xxx</option><option>AMD Radeon RX 5xxx</option></select></div>
                <div class="form-group"><label for="screen">Résolution de l'écran</label><select id="screen"><option>HD (1366x768)</option><option>Full HD (1920x1080)</option><option>QHD (2560x1440)</option><option>4K UHD (3840x2160)</option></select></div>
                <div class="form-group"><label for="age">Âge du PC</label><select id="age"><option>Moins de 1 an</option><option>1 à 2 ans</option><option>2 à 3 ans</option><option>Plus de 3 ans</option></select></div>
                <div class="form-group full-width"><label>État</label><div class="inline-group"><label><input type="radio" name="condition" value="Neuf" checked> Neuf</label><label><input type="radio" name="condition" value="Reconditionné"> Reconditionné</label><label><input type="radio" name="condition" value="Occasion - Excellent"> Occasion - Excellent</label><label><input type="radio" name="condition" value="Occasion - Bon"> Occasion - Bon</label></div></div>
                <button type="submit">Publier l'offre</button>
            </form>
        </section>

        <main>
            <div id="offer-list"></div>
            <div id="no-results-message"><p>Aucune offre ne correspond à vos critères de recherche.</p></div>
        </main>
    </div>

    <!-- ======================= SECTION JAVASCRIPT (FORTEMENT MODIFIÉE) ======================= -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const searchBar = document.getElementById('search-bar');
            const addOfferForm = document.getElementById('add-offer-form');
            const offerList = document.getElementById('offer-list');
            const filterControls = document.querySelectorAll('.filter-control'); // Includes new score filters
            const resetFiltersBtn = document.getElementById('reset-filters-btn');
            const noResultsMessage = document.getElementById('no-results-message');

            // --- AJOUT : FONCTION POUR GÉNÉRER LA NOTATION PAR ÉTOILES ---
            const generateStarsHTML = (note) => {
                const score = parseInt(note) || 0;
                const totalStars = 5;
                let filledStars = 0;

                if (score >= 80) filledStars = 5;
                else if (score >= 60) filledStars = 4;
                else if (score >= 40) filledStars = 3;
                else if (score >= 20) filledStars = 2;
                else if (score > 0) filledStars = 1;

                let starsHTML = '';
                for (let i = 0; i < filledStars; i++) {
                    starsHTML += '★';
                }
                for (let i = 0; i < totalStars - filledStars; i++) {
                    starsHTML += '<span class="empty-star">☆</span>';
                }
                return `<div class="star-rating" title="Note du vendeur: ${score}/100">${starsHTML}</div>`;
            };

            // --- NOUVELLES FONCTIONS DE CALCUL DE SCORE ---

            const calculateGamingScore = (data) => {
                let score = 0;
                // GPU (max 40 pts)
                if (data.gpu.includes('RTX 40xx') || data.gpu.includes('RX 7xxx')) score += 40;
                else if (data.gpu.includes('RTX 30xx') || data.gpu.includes('RX 6xxx')) score += 30;
                else if (data.gpu.includes('RTX 20xx') || data.gpu.includes('RX 5xxx') || data.gpu.includes('GTX 16xx')) score += 20;
                else if (data.gpu.includes('Intégrée')) score += 5; // Basic gaming
                
                // CPU (max 25 pts)
                if (data.cpu.includes('i9') || data.cpu.includes('Ryzen 9')) score += 25;
                else if (data.cpu.includes('i7') || data.cpu.includes('Ryzen 7')) score += 20;
                else if (data.cpu.includes('i5') || data.cpu.includes('Ryzen 5')) score += 15;
                else if (data.cpu.includes('Apple')) score += 18; // Good for some games, optimized
                else score += 5;

                // RAM (max 20 pts)
                const ram = parseInt(data.ram);
                if (ram >= 32) score += 20;
                else if (ram >= 16) score += 15;
                else if (ram >= 8) score += 8;
                else score += 2;

                // Stockage (max 10 pts)
                if (data.storageType === 'SSD') score += 10; else score += 3;
                if (parseInt(data.storageSize) >= 1000) score += 5; // Bonus for 1TB+

                // Screen (max 5 pts - focus on resolution for simplicity, refresh rate would be better)
                if (data.screen.includes('QHD') || data.screen.includes('4K')) score += 5;
                else if (data.screen.includes('Full HD')) score += 3;

                return Math.max(0, Math.min(100, Math.round(score)));
            };

            const calculateProfessionalScore = (data) => {
                let score = 0;
                // CPU (max 30 pts)
                if (data.cpu.includes('i9') || data.cpu.includes('Ryzen 9') || data.cpu.includes('Apple')) score += 30;
                else if (data.cpu.includes('i7') || data.cpu.includes('Ryzen 7')) score += 25;
                else if (data.cpu.includes('i5') || data.cpu.includes('Ryzen 5')) score += 15;
                else score += 5;

                // RAM (max 25 pts)
                const ram = parseInt(data.ram);
                if (ram >= 32) score += 25;
                else if (ram >= 16) score += 20;
                else if (ram >= 8) score += 10;
                else score += 3;

                // Stockage (max 20 pts)
                if (data.storageType === 'SSD') score += 15; else score += 5;
                if (parseInt(data.storageSize) >= 512) score += 5;

                // Fiabilité/État (max 15 pts)
                if (data.condition === 'Neuf') score += 15;
                else if (data.condition === 'Reconditionné' || data.condition === 'Occasion - Excellent') score += 10;
                else score += 5;
                if (data.age === 'Moins de 1 an') score += 5;

                // Screen for productivity (max 10 pts)
                if (data.screen.includes('4K') || data.screen.includes('QHD')) score += 10;
                else if (data.screen.includes('Full HD')) score += 5;
                
                return Math.max(0, Math.min(100, Math.round(score)));
            };

            const calculatePortabilityScore = (data) => {
                let score = 0;
                // Âge (max 30 pts - newer often implies lighter, better battery tech)
                if (data.age === 'Moins de 1 an') score += 30;
                else if (data.age === '1 à 2 ans') score += 20;
                else if (data.age === '2 à 3 ans') score += 10;

                // Marque (subjective, but some are known for portable lines) (max 15 pts)
                if (data.brand === 'Apple' || data.brand === 'Microsoft') score += 15; // Surface, MacBooks
                else if (data.brand === 'Dell' || data.brand === 'Lenovo') score += 10; // XPS, ThinkPad X series
                
                // GPU type (Integrated better for battery/size) (max 25 pts)
                if (data.gpu.includes('Intégrée')) score += 25;
                else if (data.gpu.includes('GTX') || data.gpu.includes('RX 5xxx')) score += 5; // Older/lower discrete might be ok
                // High-end discrete GPUs get 0 for this category here

                // Stockage Type (SSD is lighter, faster boot) (max 15 pts)
                if (data.storageType === 'SSD') score += 15;

                // Condition (max 15 pts - newer state often means better battery health)
                if (data.condition === 'Neuf') score += 15;
                else if (data.condition === 'Reconditionné' || data.condition === 'Occasion - Excellent') score += 10;

                return Math.max(0, Math.min(100, Math.round(score)));
            };
            
            const getComponentTier = (componentType, value) => {
                // Returns a tier from 1 (low) to 4 (high)
                if (componentType === 'cpu') {
                    if (value.includes('i9') || value.includes('Ryzen 9') || value.includes('Apple M')) return 4;
                    if (value.includes('i7') || value.includes('Ryzen 7')) return 3;
                    if (value.includes('i5') || value.includes('Ryzen 5')) return 2;
                    return 1;
                } else if (componentType === 'ram') {
                    const ramVal = parseInt(value);
                    if (ramVal >= 32) return 4;
                    if (ramVal >= 16) return 3;
                    if (ramVal >= 8) return 2;
                    return 1;
                } else if (componentType === 'gpu') {
                    if (value.includes('RTX 40xx') || value.includes('RX 7xxx')) return 4;
                    if (value.includes('RTX 30xx') || value.includes('RX 6xxx')) return 3;
                    if (value.includes('RTX 20xx') || value.includes('GTX 16xx') || value.includes('RX 5xxx')) return 2;
                    return 1; // Integrated or very old
                }
                return 1; // Default
            };

            const calculateComponentBalanceScore = (data) => {
                // Score from 0 to 10
                const tiers = [
                    getComponentTier('cpu', data.cpu),
                    getComponentTier('ram', data.ram),
                    getComponentTier('gpu', data.gpu)
                ];

                const n = tiers.length;
                if (n === 0) return 0;
                const mean = tiers.reduce((a, b) => a + b) / n;
                const stdDev = Math.sqrt(tiers.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n);

                // Lower stdDev is better. Max stdDev for 3 items with tiers 1-4 is around 1.2-1.5
                // We want to map stdDev (0 to ~1.5) to a score (10 to 0)
                let score = 10 - (stdDev * 5); // Adjust multiplier (5) as needed
                return Math.max(0, Math.min(10, Math.round(score)));
            };

            const calculateQualityPriceScore = (data, scores) => {
                // Use an average of the three persona scores as a general "quality" indicator
                // Or take the highest persona score if it's meant for a specific purpose
                // Let's use average for a general Q/P
                const avgPersonaScore = (scores.gaming + scores.professional + scores.portability) / 3;
                
                // Price factor: higher price reduces score.
                // Normalize price relative to a typical range, e.g., 200 to 3000 EUR
                // A very cheap PC (200 EUR) shouldn't be penalized much.
                // A very expensive PC (3000 EUR) should have a significant impact.
                let priceFactor = 0;
                const price = parseFloat(data.price);

                if (price <= 500) priceFactor = 0; // Low penalty for cheap
                else if (price <= 1500) priceFactor = (price - 500) / 1000 * 30; // up to 30 pts penalty
                else if (price <= 2500) priceFactor = 30 + (price - 1500) / 1000 * 30; // up to 60 pts penalty
                else priceFactor = 60 + Math.min(40, (price - 2500) / 500 * 40); // Max 100 pts penalty (effectively making score 0 if quality is not exceptional)

                let qpScore = avgPersonaScore - priceFactor;
                // Add a small bonus from balance score
                qpScore += scores.balance; // Balance score is 0-10, so it's a small nudge

                return Math.max(0, Math.min(100, Math.round(qpScore)));
            };


            // --- FONCTION DE FILTRAGE PRINCIPALE (Mise à jour pour nouveaux scores) ---
            const applyFilters = () => {
                const searchTerm = searchBar.value.toLowerCase();
                const activeFilters = {
                    brand: document.getElementById('filter-brand').value,
                    ram: document.getElementById('filter-ram').value,
                    condition: document.getElementById('filter-condition').value,
                    age: document.getElementById('filter-age').value,
                    gpu: document.getElementById('filter-gpu').value,
                    minPrice: parseFloat(document.getElementById('filter-price-min').value) || 0,
                    maxPrice: parseFloat(document.getElementById('filter-price-max').value) || Infinity,
                    // New score filters
                    minGamingScore: parseFloat(document.getElementById('filter-gaming-score-min').value) || 0,
                    maxGamingScore: parseFloat(document.getElementById('filter-gaming-score-max').value) || 100,
                    minProScore: parseFloat(document.getElementById('filter-pro-score-min').value) || 0,
                    maxProScore: parseFloat(document.getElementById('filter-pro-score-max').value) || 100,
                    minPortabilityScore: parseFloat(document.getElementById('filter-portability-score-min').value) || 0,
                    maxPortabilityScore: parseFloat(document.getElementById('filter-portability-score-max').value) || 100,
                    minQpScore: parseFloat(document.getElementById('filter-qp-score-min').value) || 0,
                    maxQpScore: parseFloat(document.getElementById('filter-qp-score-max').value) || 100,
                    minBalanceScore: parseFloat(document.getElementById('filter-balance-score-min').value) || 0,
                    maxBalanceScore: parseFloat(document.getElementById('filter-balance-score-max').value) || 10,
                };

                const offers = document.querySelectorAll('.offer-card');
                let visibleOffersCount = 0;
                
                offers.forEach(offer => {
                    const cardData = {
                        name: offer.dataset.name.toLowerCase(),
                        brand: offer.dataset.brand,
                        ram: offer.dataset.ram,
                        condition: offer.dataset.condition,
                        age: offer.dataset.age,
                        gpu: offer.dataset.gpu,
                        price: parseFloat(offer.dataset.price),
                        // New scores from dataset
                        gamingScore: parseInt(offer.dataset.gamingScore),
                        proScore: parseInt(offer.dataset.proScore),
                        portabilityScore: parseInt(offer.dataset.portabilityScore),
                        qpScore: parseInt(offer.dataset.qpScore),
                        balanceScore: parseInt(offer.dataset.balanceScore)
                    };

                    let isMatch = true;
                    if (!cardData.name.includes(searchTerm)) isMatch = false;
                    if (activeFilters.brand && cardData.brand !== activeFilters.brand) isMatch = false;
                    if (activeFilters.ram && cardData.ram !== activeFilters.ram) isMatch = false;
                    if (activeFilters.condition && cardData.condition !== activeFilters.condition) isMatch = false;
                    if (activeFilters.age && cardData.age !== activeFilters.age) isMatch = false;
                    if (activeFilters.gpu && cardData.gpu !== activeFilters.gpu) isMatch = false; // Note: filter GPU may need to be more granular
                    if (cardData.price < activeFilters.minPrice || cardData.price > activeFilters.maxPrice) isMatch = false;
                    
                    // New score filter checks
                    if (cardData.gamingScore < activeFilters.minGamingScore || cardData.gamingScore > activeFilters.maxGamingScore) isMatch = false;
                    if (cardData.proScore < activeFilters.minProScore || cardData.proScore > activeFilters.maxProScore) isMatch = false;
                    if (cardData.portabilityScore < activeFilters.minPortabilityScore || cardData.portabilityScore > activeFilters.maxPortabilityScore) isMatch = false;
                    if (cardData.qpScore < activeFilters.minQpScore || cardData.qpScore > activeFilters.maxQpScore) isMatch = false;
                    if (cardData.balanceScore < activeFilters.minBalanceScore || cardData.balanceScore > activeFilters.maxBalanceScore) isMatch = false;

                    if (isMatch) {
                        offer.style.display = 'flex';
                        visibleOffersCount++;
                    } else {
                        offer.style.display = 'none';
                    }
                });
                noResultsMessage.style.display = (visibleOffersCount === 0) ? 'block' : 'none';
            };

            // --- ÉCOUTEURS D'ÉVÉNEMENTS (Mise à jour) ---
            searchBar.addEventListener('input', applyFilters);
            filterControls.forEach(control => control.addEventListener('input', applyFilters)); // This now includes new score filters
            resetFiltersBtn.addEventListener('click', () => {
                // Reset form fields
                document.getElementById('add-offer-form').reset(); 
                // Reset filter select dropdowns
                document.getElementById('filter-brand').selectedIndex = 0;
                document.getElementById('filter-ram').selectedIndex = 0;
                document.getElementById('filter-condition').selectedIndex = 0;
                document.getElementById('filter-age').selectedIndex = 0;
                document.getElementById('filter-gpu').selectedIndex = 0;
                // Reset number inputs for price and scores
                ['filter-price-min', 'filter-price-max', 
                 'filter-gaming-score-min', 'filter-gaming-score-max',
                 'filter-pro-score-min', 'filter-pro-score-max',
                 'filter-portability-score-min', 'filter-portability-score-max',
                 'filter-qp-score-min', 'filter-qp-score-max',
                 'filter-balance-score-min', 'filter-balance-score-max'
                ].forEach(id => document.getElementById(id).value = '');
                
                applyFilters();
            });

            // --- LOGIQUE D'AJOUT D'OFFRE (Mise à jour pour calculer et stocker tous les scores) ---
            addOfferForm.addEventListener('submit', (event) => {
                event.preventDefault();
                const formData = {
                    title: document.getElementById('title').value,
                    price: document.getElementById('price').value,
                    phone: document.getElementById('phone').value, // AJOUT
                    userNote: document.getElementById('user-note').value,
                    brand: document.getElementById('brand').value,
                    cpu: document.getElementById('cpu').value,
                    ram: document.getElementById('ram').value,
                    storageSize: document.getElementById('storage-size').value.replace(' Go','').replace(' To','000'), // For parsing
                    storageType: document.querySelector('input[name="storage-type"]:checked').value,
                    gpu: document.getElementById('gpu').value,
                    screen: document.getElementById('screen').value,
                    age: document.getElementById('age').value,
                    condition: document.querySelector('input[name="condition"]:checked').value,
                };

                // Calculate all scores
                const scores = {
                    gaming: calculateGamingScore(formData),
                    professional: calculateProfessionalScore(formData),
                    portability: calculatePortabilityScore(formData),
                    balance: calculateComponentBalanceScore(formData)
                };
                scores.qualityPrice = calculateQualityPriceScore(formData, scores);
                
                // AJOUT : Générer le HTML pour les étoiles
                const starsHTML = generateStarsHTML(formData.userNote);


                const offerCard = document.createElement('div');
                offerCard.classList.add('offer-card');
                
                // Store all relevant data including new scores in dataset attributes
                offerCard.dataset.name = formData.title;
                offerCard.dataset.brand = formData.brand;
                offerCard.dataset.ram = formData.ram;
                offerCard.dataset.cpu = formData.cpu; // For potential future more detailed filtering
                offerCard.dataset.condition = formData.condition;
                offerCard.dataset.age = formData.age;
                offerCard.dataset.gpu = formData.gpu; // For potential future more detailed filtering
                offerCard.dataset.price = formData.price;
                offerCard.dataset.gamingScore = scores.gaming;
                offerCard.dataset.proScore = scores.professional;
                offerCard.dataset.portabilityScore = scores.portability;
                offerCard.dataset.qpScore = scores.qualityPrice;
                offerCard.dataset.balanceScore = scores.balance;
                
                // AJOUT : Modification du innerHTML pour inclure les étoiles et le numéro de téléphone
                offerCard.innerHTML = `
                    <h2>${formData.title}</h2>
                    ${starsHTML}
                    <ul class="offer-details">
                        <li>
                            <span class="score-badge user-score">Util: ${formData.userNote}/100</span>
                            <span class="score-badge gaming-score">Gaming: ${scores.gaming}/100</span>
                            <span class="score-badge pro-score">Pro: ${scores.professional}/100</span>
                            <span class="score-badge portability-score">Mobilité: ${scores.portability}/100</span>
                            <span class="score-badge qp-score">Q/P: ${scores.qualityPrice}/100</span>
                            <span class="score-badge balance-score">Équilibre: ${scores.balance}/10</span>
                        </li>
                        ${formData.phone ? `<li><strong>Téléphone:</strong> ${formData.phone}</li>` : ''}
                        <li><strong>État:</strong> ${formData.condition}</li>
                        <li><strong>Âge:</strong> ${formData.age}</li>
                        <li><strong>CPU:</strong> ${formData.cpu}</li>
                        <li><strong>GPU:</strong> ${formData.gpu}</li>
                        <li><strong>RAM:</strong> ${formData.ram} Go</li>
                        <li><strong>Stockage:</strong> ${document.getElementById('storage-size').value} ${formData.storageType}</li>
                    </ul>
                    <p class="price">${formData.price} €</p>
                `;

                offerList.prepend(offerCard);
                addOfferForm.reset();
                // Set default for radio buttons again if needed, form.reset() should handle it
                document.querySelector('input[name="storage-type"][value="SSD"]').checked = true;
                document.querySelector('input[name="condition"][value="Neuf"]').checked = true;
                document.getElementById('ram').value = '16'; // Reset select to a common default

                document.getElementById('title').focus();
                applyFilters();
            });

            // Création d'offres de départ pour la démo
            const initialOffers = [
                 // AJOUT : Ajout d'un numéro de téléphone à une offre de démo
                 {title: 'Dell XPS 15 (Pro Polyvalent)', price: '1650', phone: '06 11 22 33 44', userNote: '90', brand: 'Dell', cpu: 'Intel Core i7', ram: '16', storageSize: '512 Go', storageType: 'SSD', gpu: 'NVIDIA GeForce RTX 30xx', screen: 'QHD (2560x1440)', age: '1 à 2 ans', condition: 'Occasion - Excellent'},
                 {title: 'MacBook Air M2 (Ultraportable)', price: '1200', phone: '', userNote: '95', brand: 'Apple', cpu: 'Apple M1/M2/M3', ram: '8', storageSize: '256 Go', storageType: 'SSD', gpu: 'Intégrée (Intel/AMD)', screen: 'QHD (2560x1440)', age: 'Moins de 1 an', condition: 'Neuf'},
                 {title: 'Lenovo Legion Gamer (Budget)', price: '950', phone: '', userNote: '80', brand: 'Lenovo', cpu: 'AMD Ryzen 5', ram: '16', storageSize: '512 Go', storageType: 'SSD', gpu: 'NVIDIA GeForce RTX 30xx', screen: 'Full HD (1920x1080)', age: '1 à 2 ans', condition: 'Reconditionné'},
                 {title: 'Asus ROG Strix Scar (Haute Perf)', price: '2800', phone: '', userNote: '88', brand: 'Asus', cpu: 'Intel Core i9', ram: '32', storageSize: '1 To', storageType: 'SSD', gpu: 'NVIDIA GeForce RTX 40xx', screen: 'QHD (2560x1440)', age: 'Moins de 1 an', condition: 'Neuf'},
                 {title: 'HP Envy x360 (Étudiant)', price: '750', phone: '', userNote: '82', brand: 'HP', cpu: 'AMD Ryzen 7', ram: '16', storageSize: '512 Go', storageType: 'SSD', gpu: 'Intégrée (Intel/AMD)', screen: 'Full HD (1920x1080)', age: 'Moins de 1 an', condition: 'Neuf'},
                 {title: 'PC Bureau Ancien (Basique)', price: '250', phone: '07 88 99 00 11', userNote: '35', brand: 'Autre', cpu: 'Intel Core i3', ram: '8', storageSize: '256 Go', storageType: 'HDD', gpu: 'Intégrée (Intel/AMD)', screen: 'HD (1366x768)', age: 'Plus de 3 ans', condition: 'Occasion - Bon'}
            ];
            
            initialOffers.forEach(data => {
                // Populate form fields from data object
                document.getElementById('title').value = data.title;
                document.getElementById('price').value = data.price;
                document.getElementById('phone').value = data.phone; // AJOUT
                document.getElementById('user-note').value = data.userNote;
                document.getElementById('brand').value = data.brand;
                document.getElementById('cpu').value = data.cpu;
                document.getElementById('ram').value = data.ram;
                document.getElementById('storage-size').value = data.storageSize;
                document.querySelector(`input[name="storage-type"][value="${data.storageType}"]`).checked = true;
                document.getElementById('gpu').value = data.gpu;
                document.getElementById('screen').value = data.screen;
                document.getElementById('age').value = data.age;
                document.querySelector(`input[name="condition"][value="${data.condition}"]`).checked = true;
                
                addOfferForm.dispatchEvent(new Event('submit')); // Trigger form submission
            });
            
            applyFilters(); // Apply initial filters (if any, or just show all)
        });
    </script>
</body>
</html>